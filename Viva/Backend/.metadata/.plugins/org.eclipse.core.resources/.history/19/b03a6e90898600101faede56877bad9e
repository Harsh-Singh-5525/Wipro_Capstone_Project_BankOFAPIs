package com.bankofapis.account.controller;

import com.bankofapis.account.model.Account;
import com.bankofapis.account.service.AccountService;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/accounts")
public class AccountController {

    private final AccountService accountService;

    public AccountController(AccountService accountService) {
        this.accountService = accountService;
    }

    @GetMapping
    public ResponseEntity<List<Account>> getAllAccounts() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        // Assuming AccountService has method to get accounts by username
        List<Account> accounts = accountService.getAccountsByUsername(username);

        return ResponseEntity.ok(accounts);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Account> getAccountById(@PathVariable Integer id) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        Account account = accountService.getAccountById(id);

        // Verify that the account belongs to the logged-in user (implement this check in service)
        if (!account.getUsername().equals(username)) {
            return ResponseEntity.status(403).build(); // Forbidden
        }
        return ResponseEntity.ok(account);
    }

    @PostMapping
    public ResponseEntity<Account> createAccount(@RequestBody Account account) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        // Set the username/userId on the account object to associate with logged-in user
        account.setUsername(username);

        Account createdAccount = accountService.createAccount(account);
        return ResponseEntity.ok(createdAccount);
    }

    @PutMapping("/{id}/updateBalance")
    public ResponseEntity<Account> updateBalance(@PathVariable Integer id, @RequestParam Double newBalance) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        Account account = accountService.getAccountById(id);

        if (!account.getUsername().equals(username)) {
            return ResponseEntity.status(403).build();
        }

        Account updatedAccount = accountService.updateBalance(id, newBalance);
        return ResponseEntity.ok(updatedAccount);
    }
}
