package com.bankofapis.backend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

/**
 * Simple security config:
 * - Protects /api/users/** endpoints (requires basic auth)
 * - Allows all other endpoints (accounts, transactions) without auth
 * - Uses an in-memory user for development (username: admin, password: admin123)
 *
 * NOTE: This configuration is for development/demo only.
 */
@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // disable CSRF for API dev
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/users/**").authenticated() // protect user APIs
                .anyRequest().permitAll() // allow other endpoints
            )
            .httpBasic(); // use HTTP Basic auth (simple for dev)
        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        // NOTE: withDefaultPasswordEncoder() is for dev only (stores password with a simple encoder).
        UserDetails admin = User.withDefaultPasswordEncoder()
                .username("admin")
                .password("admin123")
                .roles("ADMIN")
                .build();
        return new InMemoryUserDetailsManager(admin);
    }
}
