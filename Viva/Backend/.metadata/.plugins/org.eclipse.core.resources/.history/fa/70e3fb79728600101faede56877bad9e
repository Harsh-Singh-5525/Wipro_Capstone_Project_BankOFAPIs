package com.bankofapis.transaction.controller;

import com.bankofapis.transaction.client.AccountClient;
import com.bankofapis.transaction.dto.AccountDTO;
import com.bankofapis.transaction.model.Transaction;
import com.bankofapis.transaction.repository.TransactionRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transaction")
public class TransactionController {

    private final TransactionRepository transactionRepository;
    private final AccountClient accountClient;

    public TransactionController(TransactionRepository transactionRepository, AccountClient accountClient) {
        this.transactionRepository = transactionRepository;
        this.accountClient = accountClient;
    }

    @GetMapping
    public ResponseEntity<List<Transaction>> getAllTransactions(Authentication authentication,
                                                                @RequestParam(required = false) Integer userId) {
        String username = authentication.getName();
        // Fetch authenticated user's ID by username (via DB or UserClient)
        // For demo, assume userId is fetched from username by your service
        Integer currentUserId = /* fetch userId from username */;
        
        if (userId != null && !userId.equals(currentUserId)) {
            return ResponseEntity.status(403).build();
        }

        List<Transaction> transactions = transactionRepository.findByUserId(currentUserId);
        return ResponseEntity.ok(transactions);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Transaction> getTransactionById(@PathVariable Integer id, Authentication authentication) {
        Transaction transaction = transactionRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Transaction not found"));

        String username = authentication.getName();
        Integer currentUserId = /* fetch userId from username */;

        if (!transaction.getUserId().equals(currentUserId)) {
            return ResponseEntity.status(403).build();
        }

        return ResponseEntity.ok(transaction);
    }

    @PostMapping
    public ResponseEntity<Transaction> createTransaction(@RequestBody Transaction transaction, Authentication authentication) {
        String username = authentication.getName();
        Integer currentUserId = /* fetch userId from username */;

        if (!transaction.getUserId().equals(currentUserId)) {
            return ResponseEntity.status(403).build();
        }

        // Business validations...

        return ResponseEntity.ok(transactionRepository.save(transaction));
    }
}
